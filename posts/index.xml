<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hello, I am Tom Gray</title>
        <link>https://iamtgray.com/posts/</link>
        <description>Recent content in Posts on Hello, I am Tom Gray</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 20 Jun 2022 17:10:14 +0100</lastBuildDate>
        <atom:link href="https://iamtgray.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Bringing security controls into CI/CD with IaC scanning</title>
            <link>https://iamtgray.com/posts/bring-controls-into-ci-cd-with-iac-scanning/</link>
            <pubDate>Mon, 20 Jun 2022 17:10:14 +0100</pubDate>
            
            <guid>https://iamtgray.com/posts/bring-controls-into-ci-cd-with-iac-scanning/</guid>
            <description>In a recent blog post I wrote about the overall controls that can be built into your CI/CD pipelines to increase your security posture.</description>
            <content type="html"><![CDATA[<p>In a <a href="/secure-ci-cd-pipelines/">recent blog post</a> I wrote about the overall controls that can be built into your CI/CD pipelines to increase your security posture.</p>
<p>This post aims to dive deeper into the specifics of IaC (Infrastructure as Code) scanning, and explore <em>some</em> of the tools available to you.</p>
<h1 id="preface">Preface</h1>
<p>Before diving into how to resolve the problem, let&rsquo;s frame the problem that exists in the entire security landscape, and is especially true in highly automated environments, that is the problem of &ldquo;normalisation of deviance&rdquo; (or &ldquo;normalization of deviance&rdquo; for my American collegues).</p>
<p>Normally when I&rsquo;m talking to customers, I might get standard list of challenges from the team I’m talking too, they might be something like:</p>
<p>“My security org can’t keep up with us”
“We’re doing agile now, how does security fit in”
“Security team have blocked us”</p>
<p>These challenges are common and by that there are mechanisms we can use to reduce the internal cost of these - and work to keep the velocity of the engineering teams high, while also maintaining or (usually) the security bar.</p>
<p>These kind of problems (and many like them) tend to breed a normalisation of deviance in the team.  Normalisation of deviance can be defined as “The gradual process through which unacceptable practice or standards becomes acceptable.”  To continue on this the original author of this quote (and the concept in general) Dr Diane Vaughan further added “as the deviant behaviour is repeated with catastrophic results, it becomes the social norm for the organisation”</p>
<p>To make that sentence a little more real, you could define it like this:</p>
<p>“
New person joins the team
New person: wtf wtf wtf wtf WTF WTF WTF
Old hand: Yeah we know, we’re concerned about it
New person: WTF WTF WTF wtf wtf wtf wt…
New person gets used to it
New person #2 joins
New person #2: WTF WTF WTF
New person: Yeah we know, we’re concerned about it.</p>
<p>I like the above structure, because it actually reminds me both of me being the new guy into a team, and me being the old hand in the team - I’ve been in both of those roles in the past and challenging the behaviours I showed then is how I approach handling this with customers.</p>
<p>The difference for those responsible for organisational security compliance in these situations - is that of awareness. Most security engineers that I’ve worked with don’t come from development backgrounds, and those that do are as rare as hen’s teeth.  Therefore the organisation needs to provide other mechanisms and controls to ensure that the compliance and governance goals of the organisation are met.</p>
<p>For a lot of customers, this comes in the form of stricter policies.  More review steps required before changes go-live, increased spend with 3rd party penetration testing organisations, and a general reduction in team velocity.  I’ve also seen companies go the other way on this, and simply try to ignore the problem - scoping down their compliance to only focus on what they can tightly control, and drawing organisational boundaries to meet compliance requirements.   As you would expect, neither of these have worked well in my experience, and both lead to challenges for the people involved.</p>
<p>One of the ways of breaking that circle, reducing the likelihood of a normalisation of deviance and increasing organisational control while still maintaining velocity - is that of automating the controls and governance of the organisation.  The more can be automated, and policy can be codified - the less organisational velocity will be lost by the need to implement those controls.</p>
<p>Let’s take for example a small subset of an imagined organisational controls - let’s say they have taken the sensible step of wanting to ensure that no users can escalate their own privilege, and they need their audit to reliably demonstrate this.</p>
<p>Below is a sample set of control requirements:</p>
<p>Stop all users being able to escalate their role / amount of privilege inside the environment
Stop the creation of high privilege roles that have a higher set of permissions than the user creating them
Ensure that all users or roles are created by the CI/CD system and are therefore subject to the organisations policies
Remediate all users or roles that are created without the correct boundaries on their permissions</p>
<h1 id="the-tools">The tools</h1>
<p>To be able to meet this and other compliance goals, there are a number of tools you can use.  The tools below focus heavily on the AWS Cloud, but some are mentioned (and noted) that support one or more cloud vendors, or are agnostic of the underlying cloud platform.</p>
<h2 id="cfn-nag">CFN Nag</h2>
<p>CFN Nag is a great linting tool (and executes quickly, so you can and should use it on an engineering machine rather than just in CI/CD).</p>
<p>CFN Nag is useful for detecting indications of insecure or incorrectly configured infrastructure as code.  Examples of this include IAM rules that are overly permissive, security group rules that are overly permissive - but also extends to access logs or encryption that’s disabled and even password literals found in the code.</p>
<h2 id="cfn-guard">CFN Guard</h2>
<p>CFN Guard is the real meat on the IaC compliance when it comes to AWS CloudFormation (and even Terraform at a push)</p>
]]></content>
        </item>
        
        <item>
            <title>Securing your CI/CD Pipelines</title>
            <link>https://iamtgray.com/posts/secure-ci-cd-pipelines/</link>
            <pubDate>Mon, 20 Jun 2022 16:10:14 +0100</pubDate>
            
            <guid>https://iamtgray.com/posts/secure-ci-cd-pipelines/</guid>
            <description>When speaking to customers about security, I always try to raise the topic of shifting security left.</description>
            <content type="html"><![CDATA[<p>When speaking to customers about security, I always try to raise the topic of shifting security left.  This relatively moden practice and thinking comes from the dual need to not only (a) de-burden the security team from the low-value tasks of approving individual changes, and (b) allowing the software engineering teams inside the organisation to increase the speed of change, while keeping the security bar high.</p>
<p>It takes a real shift in mindset for most organisations (and the security teams within them) to start moving security left.  Often customers ask what exactly is meant by &ldquo;shifting left&rdquo; in this context.  To help make the phrase &ldquo;shift left&rdquo; real in a customers mind, I commonly point them to their CI/CD pipeline.</p>
<p>Take the below example of a common CI/CD pipeline pattern:</p>
<p><img src="/img/ci-cd-pipelines/basic-ci-cd-pipeline.png" alt="Example CI/CD Pipeline"></p>
<p>Looking at the example given above, normally security would be inserted (manually) just after the &ldquo;Auto Test&rdquo; step.  Security tickets would be cut, and a representative from infosec might review the changes being made to production, they might run a vulnerability scan against the application, and possibly even review some code before approving the release.</p>
<p>The concept of shifting left literally moves this step leftwards in the pipeline, rather than security teams being involved in the process just before the release to production (and more often than not, stopping the pipeline and causing changes to back-up while they gather an understanding of the scope of change, and the risk to the business) they are instead involved at an earlier stage.</p>
<p>Often teams do this by bringing a security engineer into the team, so that they can be involved in sprint ceremonies, or other workflow events to &ldquo;ensure the security bar&rdquo; - this can sometimes lead however to changes being slowed sooner rather than later, rather than a speeding up of the overall pipeline (although externally to the business, it may feel faster because there are fewer release pauses).</p>
<p>A more practical answer to keep the speed high and the quality high, is to automate as much as possible of the work that the security engineer might perform, so that when they are involved they are presented with high quality, accurate information in a timely manner, and they can use their specialist skills and expertise to home-in on the problem faster.  This can be further extended by the use of automated tooling to help the developers in the team get security feedback faster.</p>
<p>This blog post will focus on this last aspect. The goal of building security practice into the CI/CD system is to ensure that we minimise production change risk in security by ensuring that a minimum security bar is met.  This free&rsquo;s security engineers up to perform more exploritory analysis and add more intrisic value to teams based on their skill sets.</p>
<h2 id="choosing-your-tooling">Choosing your tooling</h2>
<p>In the market today, there are hundreds of different peieces of software to help you automate aspects of security for your workload, with that choice available in the market this blog post cannot cover all use cases in all programming langauges being deployed to all environments.</p>
<p>This post does not focus on the specific tools (there are dive-deep posts for that) but instead focuses on the overall goal, and how it can be achieved.</p>
<h3 id="different-tooling-types">Different tooling types</h3>
<ol>
<li>SAST: Static Analysis Security Testing is the most common, basic and well-used automated security testing tool in CI/CD pipelines.  SAST analysis examines the code in the application, and attempts to determine through fixed rules or models if an application has inherent security flaws.  SAST tooling is excellent for detecting basic configuration errors, but is also capable (when using the right tools) of detecting more advanced threats such as inputs that are not cleaned, or overflow attacks</li>
<li>DAST: Dynamic Analysis Security Testing is a less common but still effective method of detecting security vulnerabilities in software. DAST tooling is designed to work in concert with a running application, and through monitoring the flow of data throgh the software, can help to uncover potential bugs and security flaws with how (for example) data is handled as it flows around the application</li>
<li>Dependency Scanning: There are a numebr of different tools (both inside and outside of the AWS ecosystem) to help track and scan application dependencies.  Given the prevelance and risk of supply chain attacks, many organisations face tough decisions when attempting to choose between giving the engineering teams the freedom to use libraries to help them perform their work more effecively, and managing the inherent risk of bringing 3rd party code into your application.  Dependency scanning tools (examples of which can be found below) can help to mitigate some of these risks, and along with SAST and DAST tooling can help to further reduce the risk.</li>
</ol>
<h1 id="a-more-expansive-pipeline">A more expansive pipeline</h1>
<p>If we want to integrate greater security controls into our CI/CD pipeline, then we need to look at a pipeline and consider the best place to bring those kind of controls in, take the below picture as a starting point:</p>
<p><img src="/img/ci-cd-pipelines/ci-cd-pipeline-example-automation.png" alt="Example CI/CD Pipeline"></p>
<p>Let&rsquo;s get into the checks we&rsquo;ve added</p>
<h2 id="before-commit">Before commit</h2>
<p>We want to perform as many checks as practical before the engineer commits any code to repo - this is due to our need to reduce alert fatigue and keep our team functioning at a high velocity.</p>
<h3 id="ide-linting">IDE Linting</h3>
<p>This can be an excellent control for any organisation, your IDE gives you instant feedback when writing software, and bringing linting that works to maintain and enhance your security posture can give real benefits and gains to your team members.</p>
<p>The exceptionally short feedback cycle reduces mental fatigue on the team, and reduces frustration with security controls &lsquo;getting in the way of work&rsquo;</p>
<p>### SAST Scanning</p>
<p>Another on-machine scan that can easily be performed as pre-commit hook would be a basic SAST scan, this in combination with linting in the IDE can give early feedback to your users.  Choosing a SAST scanner that can look at specific files will mean the scans can run quickly, and giving users that feedback as early as possbile will help to reduce fatigue.</p>
<p><em>Note</em> While a pre-commit hook is a mechanism to have a scan performed before merge, this can still increase frustration in your engineers, so choose your rule-set wisely, each rule must have a business purpose, applying a set of defaults and forgetting about it is likely to cause normalisation of deviance.</p>
<h2 id="post-commit-checks">Post-commit checks</h2>
<p>For all the checks that we could perform on the user&rsquo;s machine, we now have likely eliminated the most obvious errors and threats in our codebase - SAST scanning on individual files likely means we have ensured that no secrets are hard coded, no basic input manipulation bugs are present.</p>
<p>Now are checks are likely to take longer, but occur in a timescale in which our customer (the engineer) is expecting minutes of time, not tenths of a second.</p>
<h3 id="library-version-scanning">Library version scanning</h3>
<p>An argument can be made that this scan can be performed on the engineers machine during their work as fixing a library being out-of-date will require additional testing to ensure that no breaking changes are being brought in.</p>
<p>Checking the versions of all of the dependencies of your applications to ensure there are no reported vulnerabilities can be a simple way to apply a level of mitigation (though not absoloute) to supply-chain attacks.</p>
<p>N.b. Important to note that library scanning tools check versions and don&rsquo;t generally perform SAST or DAST checks, so your supply chain can still be broken for a period before a vulerability is reported agasinst the library you use.</p>
<h3 id="deep-sast-scanning">Deep SAST scanning</h3>
<p>While not an official term in the industry, I use the term &ldquo;Deep SAST&rdquo; to differentiate a SAST scan that will be run across the entire codebase, libraries and dependencies.  This is to try to mitigate further supply-chain based vectors, and ensure compliance.  These SAST scans will need to focus not on code quality (which was what we checked pre-commit) but more on obvious vulnerabilities.</p>
<h3 id="iac-code-scanning">IaC code scanning</h3>
<p>If you are using IaC (which you should be) to manage your deployed environment, then an easy way to implement organisational controls into your engineering and ensure guard-rails are properly applied before they get into the environment, is to implement a set of IaC Code Scanning tools.</p>
<p>For more detail on this - check out the <a href="/bring-controls-into-ci-cd-with-iac-scanning/">post I have created on IaC code scanning</a></p>
<h2 id="post-pull-request-changes">Post pull-request changes</h2>
<p>Assuming that your engineering team operates on a pull-request model, where changes are peer reviewed before being merged into the development branch (which is a generally reccomended practice) then you can perform further and more intensive compliance checks in the build system.</p>
<p>It is expected by engineers that builds will take minutes at least, and are generally a great time to go off and grab a hot beverage of choice, in this time we can run more intrusive and time/compute intensive checks</p>
<h3 id="dast-scanning">DAST Scanning</h3>
<p>At build time can be a great time to run DAST tooling against your application - you&rsquo;ve got an integrated built/compiled application at this point, so you can trigger a DAST scan against your application.</p>
<p>N.b. this scan will likely find more complex bugs/vulernabilities - but you are still testing components in isolation rather than integration, consider running further scans post-integration (see Automated pen testing).</p>
<h3 id="security-regression-testing">Security Regression testing</h3>
<p>This one is frequently missed by high-speed engineering teams, but can be vitally important to ensuring compliance - having a regression pack not only for normal failures in an application discovered, but also for security incidents discovered can be vitally important.</p>
<p>Having this pack seperate from your normal automated DAST/SAST/Pen Test pack ensures that changes to the underlying scanning engines do not stop or change detection on previously detected vulnerbailities</p>
<h2 id="deployment">Deployment</h2>
<p>Once you have a build codebase that has now been deployed to some kind of testing environment, you can now perform security integration tests against your workload.  This is the time to bring in fuzzing and rules based testing systems that act on all inputs to your application to ensure that the application continues to behave as expected</p>
<h3 id="automated-pen-testing">Automated pen testing</h3>
<p>Using tools to run an automated application vulnerability assessment on your application can provide continuous assurance to the information security function in the organisation that continous compliance is being upheld</p>
<h3 id="special-mention-automated-load-testing">Special mention: Automated load testing</h3>
<p>A special mention here (and a favorite of mine) is automating load testing at this stage.  Having a basic performance pack run against your application ensures that if your application comes under a DoS attack that you know how your application will respond.</p>
<p>While not directly part of the compliance of the application - having an awareness of how your application behaves can be advantagoes, and will allow you to spot patterns and trends in changes to application behavior under load.</p>
<h1 id="summary">Summary</h1>
<p>This post has focused on the pipeline itself, and has steered away from specific tooling that can be used.  The purpose of not focusing on the tools is that you as the user must choose the tools that meet your compliance requirements and orgnisational goals - while the &lsquo;dive deep&rsquo; articles like the <a href="/bring-controls-into-ci-cd-with-iac-scanning/">infrastructure as code scanning</a> do go deeper into the available tools - these sets of best practices allow you to see where you can aim for, without getting bogged down in tooling selection.</p>
<p>Elevating your thinking to solving the overarchiing problem of compliance in your CI/CD pipelines is nessesary to not get bogged down in detail, and forget the organisational goal.</p>
]]></content>
        </item>
        
        <item>
            <title>Sa Associate Notes</title>
            <link>https://iamtgray.com/posts/sa-associate-notes/</link>
            <pubDate>Thu, 28 May 2020 09:41:18 +0100</pubDate>
            
            <guid>https://iamtgray.com/posts/sa-associate-notes/</guid>
            <description>Update as of March 2022 - I have now achieved AWS SA Associate, AWS SA Professional and AWS Security Speciality certifications.</description>
            <content type="html"><![CDATA[<p>Update as of March 2022 - I have now achieved AWS SA Associate, AWS SA Professional and AWS Security Speciality certifications.
My experience has so far been that all three associate qualifications combined effectively produce one SA Pro, and the move from SA pro into the specialty certifications is not large, and geenrally involves going only a little deeper.</p>
<p>The exam with the highest bar (so far) has been the AWS DevOps Pro certification.</p>
<hr>
<p>As part of my new role @ AWS, I (unsurprisingly) need to get a bit more certified on paper than a simple &ldquo;Don&rsquo;t worry mate, I&rsquo;ve been doing this for years..&rdquo; so for the first year of my new role, I will have a heavy focus on learning, and part of that will be my certifications.</p>
<p>The first one I will go for is the AWS SA Associate exam, which by all accouts should be pretty easy - I did a practice exam and passed, so I&rsquo;m pretty confident that all should be well.  Overkill being the underrated thing that it is though, I thought I should do some more formal study for the exam (as i&rsquo;m going to have to start getting used to doing that!).</p>
<p>As part of that, I watched the 14 hours of acloud.guru preperation talks for the AWS SA associate exam.  There wasn&rsquo;t anything really surprising in there, although AWS HA and AWS S3 were both areas where my knowledge was pretty weak by the looks of it.</p>
<p>Below are my notes that I wrote out while watching these turorials. Forgive my aweful handwriting.</p>
<p><img src="/img/sa-associate-notes/Page1.png" alt="Notes Page1">
<img src="/img/sa-associate-notes/Page2.png" alt="Notes Page2">
<img src="/img/sa-associate-notes/Page3.png" alt="Notes Page3">
<img src="/img/sa-associate-notes/Page4.png" alt="Notes Page4">
<img src="/img/sa-associate-notes/Page5.png" alt="Notes Page5">
<img src="/img/sa-associate-notes/Page6.png" alt="Notes Page6">
<img src="/img/sa-associate-notes/Page7.png" alt="Notes Page7">
<img src="/img/sa-associate-notes/Page8.png" alt="Notes Page8">
<img src="/img/sa-associate-notes/Page9.png" alt="Notes Page9">
<img src="/img/sa-associate-notes/Page10.png" alt="Notes Page10">
<img src="/img/sa-associate-notes/Page11.png" alt="Notes Page11">
<img src="/img/sa-associate-notes/Page12.png" alt="Notes Page12">
<img src="/img/sa-associate-notes/Page13.png" alt="Notes Page13">
<img src="/img/sa-associate-notes/Page14.png" alt="Notes Page14">
<img src="/img/sa-associate-notes/Page15.png" alt="Notes Page15">
<img src="/img/sa-associate-notes/Page16.png" alt="Notes Page16">
<img src="/img/sa-associate-notes/Page17.png" alt="Notes Page17">
<img src="/img/sa-associate-notes/Page18.png" alt="Notes Page18">
<img src="/img/sa-associate-notes/Page19.png" alt="Notes Page19">
<img src="/img/sa-associate-notes/Page20.png" alt="Notes Page20">
<img src="/img/sa-associate-notes/Page21.png" alt="Notes Page21">
<img src="/img/sa-associate-notes/Page22.png" alt="Notes Page22">
<img src="/img/sa-associate-notes/Page23.png" alt="Notes Page23">
<img src="/img/sa-associate-notes/Page24.png" alt="Notes Page24">
<img src="/img/sa-associate-notes/Page25.png" alt="Notes Page25">
<img src="/img/sa-associate-notes/Page26.png" alt="Notes Page26">
<img src="/img/sa-associate-notes/Page27.png" alt="Notes Page27">
<img src="/img/sa-associate-notes/Page28.png" alt="Notes Page28"></p>
]]></content>
        </item>
        
        <item>
            <title>Job Move</title>
            <link>https://iamtgray.com/posts/job-move/</link>
            <pubDate>Thu, 28 May 2020 08:54:14 +0100</pubDate>
            
            <guid>https://iamtgray.com/posts/job-move/</guid>
            <description>Having spent 4 months deciding that I wanted to leave, and a further 4 months applying for a job with AWS, Friday the 5th of June marks my last day as a principal consultant at InfinityWorks, the end of a four year journey in which I have learned more than I thought possible.</description>
            <content type="html"><![CDATA[<p>Having spent 4 months deciding that I wanted to leave, and a further 4 months applying for a job with AWS, Friday the 5th of June marks my last day as a principal consultant at InfinityWorks, the end of a four year journey in which I have learned more than I thought possible.</p>
<p>Below is the email I sent to my colleagues in the last few days at InfinityWorks.</p>
<hr>
<p>Hey Kids</p>
<p>It’s the end of the road for me, my last day at Infinity is Friday the 5th of June!  I think Dan B sent an email around last week about this, but I thought I would drop you all a line to say so long, and thanks for all the fish!</p>
<p>Over the last four years at Infinity, I have learned more than I dreamed possible.  I joined IW as a “PHP Developer” 4 years ago, who had messed with a few servers, done the odd security thing and who firmly believed that Docker was not the way of the future, and that provisioning metal was just ‘better’. Oh wow, what a journey it has been, sometimes stressful - but usually brilliant at the same time. I have had the pleasure to work with some of the most talented people that I will probably ever work with, people who are deeply passionate about doing the right thing in the right way for the client.</p>
<p>I leave with a light heart, safe and secure in the knowledge that I leave Infinity a different place to that which I joined, but that which is changing for the better in many ways.  That’s it, the end, now you’ll have to start explaining to people the origin of the phrase “just be a bit less ‘Tom Gray’” – but I’m sure that will be a good thing.  I can certainly believe that Charlotte and her team will have less to do now.</p>
<p>I am indebted to you all for what I have been able to learn from each of you, and the world of technology being the incredibly small world it is – I’m certain that I will see/work with you all again at some point in the future.  In terms of a leaving ‘do’, my current plan is to pop back into Apsley when it’s back open again (and the pubs are open again) and organise a bit of a session where we can get together.</p>
<p>Also in true ‘those who leave IW and to go AWS’ fashion, I’m going to try and wrangle my way into the Christmas party too, because you all should have the opportunity to tell me to ‘f*** off’ at least once more..</p>
<p>To infinity and beyond. Don’t forget to seize the fish.</p>
<p>Tom</p>
]]></content>
        </item>
        
    </channel>
</rss>
